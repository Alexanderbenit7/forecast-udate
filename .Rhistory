library(dplyr)
library(tidyr)
library(forcats)
library(hexbin)
library(ggrepel)
# Create the RMSPE plot
rmspe_plot = ggplot(mlModels, aes(x = tmodel, y = rmspe, group = nfeatures, color = nfeatures)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
geom_text_repel(aes(label = round(rmspe, 4)), size = 6, show.legend = FALSE) +  # Use ggrepel for labels
labs(title = " ", x = " ", y = "RMSPE") +
theme_minimal() +
theme(
legend.position = "bottom",
legend.title = element_blank(),
axis.title = element_text(size = 10),
axis.text = element_text(size = 8)
)
# Save the plot
ggsave("rmspe.png")
# Create the R² plot
r2_plot = ggplot(mlModels, aes(x = tmodel, y = r2, group = nfeatures, color = nfeatures)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
geom_text_repel(aes(label = round(r2, 4)), size = 6, show.legend = FALSE) +
labs(title = " ", x = " ", y = "R²") +
theme_minimal() +
theme(
legend.position = "bottom",
legend.title = element_blank(),
axis.title = element_text(size = 10),
axis.text = element_text(size = 8))
ggsave("r2.png")
data = import("/Users/alexander/Documents/MSc Data Science/Understanding Data and their Environment/Assignment 2/final-data/final-data-forecast.csv")
data = import("/Users/alexander/Documents/MSc Data Science/Understanding Data and their Environment/Assignment 2/final-data/final-trainData.csv")
forecasted = import("/Users/alexander/Documents/MSc Data Science/Understanding Data and their Environment/Assignment 2/final-data/forecasted-data.csv")
stats = open %>%
summarize(
mean_sales = mean(Sales, na.rm = TRUE),
sd_sales = sd(Sales, na.rm = TRUE),
p25 = quantile(Sales, 0.25, na.rm = TRUE),
p50 = quantile(Sales, 0.50, na.rm = TRUE),
p75 = quantile(Sales, 0.75, na.rm = TRUE)
)
open = data[data$Open == 1,] # Only working with data for open stores
stats = open %>%
summarize(
mean_sales = mean(Sales, na.rm = TRUE),
sd_sales = sd(Sales, na.rm = TRUE),
p25 = quantile(Sales, 0.25, na.rm = TRUE),
p50 = quantile(Sales, 0.50, na.rm = TRUE),
p75 = quantile(Sales, 0.75, na.rm = TRUE)
)
# Create density plot
ggplot(open, aes(x = Sales)) +
geom_density(fill = "lightblue", alpha = 0.6) +  # Density plot
geom_vline(aes(xintercept = stats$mean_sales), color = "red",
linetype = "dashed", size = .5) +  # Mean
annotate("text", x = 30000, y = 0.00012,
label = paste0("Mean: ", round(stats$mean_sales, 0),
"\nSD: ", round(stats$sd_sales, 0),
"\nP25: ", round(stats$p25,0),
"\nP50: ", round(stats$p50,0),
"\nP75: ", round(stats$p75,0)), size = 3) +
labs(x = " ",
y = " ") +
theme_minimal()
ggsave("distribution.png")
monthly_sales = open %>%
mutate(Month = as.Date(cut(Date, breaks = "month"))) %>%  # Group dates by month
group_by(Month) %>%
summarise(Average_Sales = mean(Sales, na.rm = TRUE))  # Calculate average sales
monthly_sales$Average_Sales = round(monthly_sales$Average_Sales,0)
# Calculate the overall mean sales
overall_mean = mean(monthly_sales$Average_Sales, na.rm = TRUE)
# Plot with updated x-axis and mean line
ggplot(monthly_sales, aes(x = Month, y = Average_Sales)) +
geom_line(color = "blue", size = 1) +  # Line plot
geom_point(color = "darkred", size = 2) +  # Points for clarity
geom_hline(yintercept = overall_mean, color = "red", linetype = "dashed", size = 0.7) +  # Horizontal mean line
scale_x_date(date_labels = "%b %Y", date_breaks = "2 months") +  # Format x-axis as months
scale_y_continuous(breaks = seq(0, max(monthly_sales$Average_Sales), by = 500)) +
labs(title = " ",
x = " ",
y = " ") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
ggsave("trends_month.png")
open$Promo = factor(open$Promo, levels = c(0:1), labels = c("No","Yes"))
open = open %>%
mutate(across(c(StoreType, DayOfWeek, Assortment, Promo), as.character))
data_long = open %>%
pivot_longer(
cols = c(StoreType, DayOfWeek, Assortment, Promo),
names_to = "Category",
values_to = "Group"
)
# Summarise mean sales for each group within each category
summary_data = data_long %>%
group_by(Category, Group) %>%
summarise(Mean_Sales = mean(Sales, na.rm = TRUE), .groups = "drop")
summary_data = summary_data %>%
mutate(Group = fct_reorder(Group, Mean_Sales, .desc = TRUE))
# Plot mean sales for each group within each category
ggplot(summary_data, aes(x = Group, y = Mean_Sales, fill = Group)) +
geom_col(alpha = 0.8) +
geom_text(aes(label = round(Mean_Sales, 0)),
vjust = -0.5, size = 3) +  # Add mean values on top
facet_wrap(~ Category, scales = "free_x") +  # Separate graphs by Category
scale_y_continuous(breaks = seq(0, max(monthly_sales$Average_Sales), by = 1000))+
labs(title = " ",
x = "",
y = "") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust =.5),  # Rotate x-axis labels
legend.position = "none")  # Remove legend since groups are clear
ggsave("trends_groups.png")
open$SchoolHoliday = factor(open$SchoolHoliday, levels = c(0:1), labels = c("No","Yes"))
open = open %>%
mutate(across(c(StateHoliday, SchoolHoliday), as.character))
data_long = open %>%
pivot_longer(
cols = c(StateHoliday, SchoolHoliday),
names_to = "Category",
values_to = "Group"
)
# Summarise mean sales for each group within each category
summary_data = data_long %>%
group_by(Category, Group) %>%
summarise(Mean_Sales = mean(Sales, na.rm = TRUE), .groups = "drop")
summary_data = summary_data %>%
mutate(Group = fct_reorder(Group, Mean_Sales, .desc = TRUE))
# Plot mean sales for each group within each category
ggplot(summary_data, aes(x = Group, y = Mean_Sales, fill = Group)) +
geom_col(alpha = 0.8) +
geom_text(aes(label = round(Mean_Sales, 0)),
vjust = -0.5, size = 3) +  # Add mean values on top
facet_wrap(~ Category, scales = "free_x") +  # Separate graphs by Category
scale_y_continuous(breaks = seq(0, max(monthly_sales$Average_Sales), by = 1000))+
labs(title = " ",
x = "",
y = "") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust =.5),  # Rotate x-axis labels
legend.position = "none")  # Remove legend since groups are clear
ggsave("holiday_groups.png")
ggplot(open, aes(x = Customers, y = Sales)) +
geom_hex(bins = 100) +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "gam", formula = y ~ s(x), color = "red", size = .5) +
labs(title = " ",
x = "Customers",
y = "Sales",
fill = "Count") +
theme_minimal() +
theme(
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.width = unit(2, "cm"),
legend.key.height = unit(0.25, "cm"),
legend.title = element_blank(),  # Remove legend title
# Adjust axis title and text size
axis.title = element_text(size = 10),
axis.text = element_text(size = 8)
)
ggsave("customers_sales.png")
View(monthly_sales)
View(forecasted)
str(forecasted)
monthly_sales_f = forecasted %>%
mutate(Month = as.Date(cut(Date, breaks = "month"))) %>%  # Group dates by month
group_by(Month) %>%
summarise(Average_Sales = mean(Sales, na.rm = TRUE))  # Calculate average sales
monthly_sales_f$Average_Sales = round(monthly_sales_f$Average_Sales,0)
View(monthly_sales_f)
View(monthly_sales)
View(monthly_sales_f)
for_month_data = rbind(monthly_sales, monthly_sales_f)
View(for_month_data)
monthly_sales_f = forecasted %>%
mutate(Month = as.Date(cut(Date, breaks = "month"))) %>%  # Group dates by month
group_by(Month) %>%
summarise(Average_Sales = mean(Sales, na.rm = TRUE))  # Calculate average sales
monthly_sales_f$Average_Sales = round(monthly_sales_f$Average_Sales,0)
monthly_sales$type = "Historical Data"
monthly_sales_f$type = "Forecasted Data"
for_month_data = rbind(monthly_sales, monthly_sales_f)
# Weeks:
weekly_sales = open %>%
mutate(Week = as.Date(cut(Date, breaks = "week"))) %>%  # Group dates by week
group_by(Week) %>%
summarise(Average_Sales = mean(Sales, na.rm = TRUE))  # Calculate average sales
weekly_sales$Average_Sales = round(weekly_sales$Average_Sales, 0)  # Round average sales
View(weekly_sales)
# Weeks:
weekly_sales = open %>%
mutate(Week = as.Date(cut(Date, breaks = "week"))) %>%  # Group dates by week
group_by(Week) %>%
summarise(Average_Sales = mean(Sales, na.rm = TRUE))  # Calculate average sales
weekly_sales$Average_Sales = round(weekly_sales$Average_Sales, 0)  # Round average sales
weekly_sales$type ? "Historical Data"
weekly_sales$type ? "Historical Data"
weekly_sales$type = "Historical Data"
# Weeks:
weekly_sales_f = forecasted %>%
mutate(Week = as.Date(cut(Date, breaks = "week"))) %>%  # Group dates by week
group_by(Week) %>%
summarise(Average_Sales = mean(Sales, na.rm = TRUE))  # Calculate average sales
weekly_sales_f$Average_Sales = round(weekly_sales_f$Average_Sales, 0)  # Round average sales
weekly_sales_f$type = "Forecasted Data"
View(weekly_sales_f)
for_weeks_data = rbind(weekly_sales, weekly_sales_f)
View(for_month_data)
View(for_weeks_data)
# Calculate the overall mean sales
overall_mean = mean(for_month_data$Average_Sales, na.rm = TRUE)
# Plot with updated x-axis and mean line
ggplot(for_month_data, aes(x = Month, y = Average_Sales)) +
geom_line(color = "blue", size = 1) +  # Line plot
geom_point(color = "darkred", size = 2) +  # Points for clarity
geom_hline(yintercept = overall_mean, color = "red", linetype = "dashed", size = 0.7) +  # Horizontal mean line
scale_x_date(date_labels = "%b %Y", date_breaks = "2 months") +  # Format x-axis as months
scale_y_continuous(breaks = seq(0, max(for_month_data$Average_Sales), by = 500)) +
labs(title = " ",
x = " ",
y = " ") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
for_month_data
# Calculate the overall mean sales
overall_mean = mean(for_month_data$Average_Sales, na.rm = TRUE)
# Plot with updated x-axis and mean line
ggplot(for_month_data, aes(x = Month, y = Average_Sales, colour = Type, group = 1)) +
geom_line(color = "blue", size = 1) +  # Line plot
geom_point(color = "darkred", size = 2) +  # Points for clarity
geom_hline(yintercept = overall_mean, color = "red", linetype = "dashed", size = 0.7) +  # Horizontal mean line
scale_x_date(date_labels = "%b %Y", date_breaks = "2 months") +  # Format x-axis as months
scale_y_continuous(breaks = seq(0, max(for_month_data$Average_Sales), by = 500)) +
labs(title = " ",
x = " ",
y = " ") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
# Calculate the overall mean sales
overall_mean <- mean(for_month_data$Average_Sales, na.rm = TRUE)
# Plot with updated x-axis and mean line
ggplot(for_month_data, aes(x = Month, y = Average_Sales, color = type, group = 1)) +
geom_line(size = 1) +  # Line plot with color based on type
geom_point(size = 2) +  # Points for clarity
geom_hline(yintercept = overall_mean, color = "red", linetype = "dashed", size = 0.7) +  # Horizontal mean line
scale_x_date(date_labels = "%b %Y", date_breaks = "2 months") +  # Format x-axis as months
scale_y_continuous(breaks = seq(0, max(for_month_data$Average_Sales), by = 500)) +
scale_color_manual(values = c("Historical Data" = "blue", "Forecasted Data" = "green")) +  # Custom colors
labs(title = " ",
x = " ",
y = " ") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
legend.title = element_blank())  # Remove legend title
# Calculate the overall mean sales
overall_mean <- mean(for_month_data$Average_Sales, na.rm = TRUE)
# Plot with updated x-axis and mean line
ggplot(for_month_data, aes(x = Month, y = Average_Sales, color = type, group = 1)) +
geom_line(size = 1) +  # Line plot with color based on type
geom_point(size = 2) +  # Points for clarity
geom_hline(yintercept = overall_mean, color = "red", linetype = "dashed", size = 0.7) +  # Horizontal mean line
scale_x_date(date_labels = "%b %Y", date_breaks = "2 months") +  # Format x-axis as months
scale_y_continuous(breaks = seq(0, max(for_month_data$Average_Sales), by = 500)) +
scale_color_manual(values = c("Historical Data" = "blue", "Forecasted Data" = "green")) +  # Custom colors
labs(title = " ",
x = " ",
y = " ") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
legend.title = element_blank()) + # Remove legend title
theme(
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.width = unit(2, "cm"),
legend.key.height = unit(0.25, "cm"),
legend.title = element_blank()
# Calculate the overall mean sales
overall_mean <- mean(for_month_data$Average_Sales, na.rm = TRUE)
# Plot with updated x-axis and mean line
ggplot(for_month_data, aes(x = Month, y = Average_Sales, color = type, group = 1)) +
geom_line(size = 1) +  # Line plot with color based on type
geom_point(size = 2) +  # Points for clarity
geom_hline(yintercept = overall_mean, color = "red", linetype = "dashed", size = 0.7) +  # Horizontal mean line
scale_x_date(date_labels = "%b %Y", date_breaks = "2 months") +  # Format x-axis as months
scale_y_continuous(breaks = seq(0, max(for_month_data$Average_Sales), by = 500)) +
scale_color_manual(values = c("Historical Data" = "blue", "Forecasted Data" = "green")) +  # Custom colors
labs(title = " ",
x = " ",
y = " ") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
legend.title = element_blank()) + # Remove legend title
theme(
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.width = unit(2, "cm"),
legend.key.height = unit(0.25, "cm"),
legend.title = element_blank())
# Calculate the overall mean sales
overall_mean <- mean(for_month_data$Average_Sales, na.rm = TRUE)
# Plot with updated x-axis and mean line
ggplot(for_month_data, aes(x = Month, y = Average_Sales, color = type, group = 1)) +
geom_line(size = 1) +  # Line plot with color based on type
geom_point(size = 2) +  # Points for clarity
geom_hline(yintercept = overall_mean, color = "red", linetype = "dashed", size = 0.7) +  # Horizontal mean line
scale_x_date(date_labels = "%b %Y", date_breaks = "2 months") +  # Format x-axis as months
scale_y_continuous(breaks = seq(0, max(for_month_data$Average_Sales), by = 500)) +
scale_color_manual(values = c("Historical Data" = "blue", "Forecasted Data" = "green")) +  # Custom colors
labs(title = " ",
x = " ",
y = " ") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
legend.title = element_blank()) + # Remove legend title
theme(
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.width = unit(1, "cm"),
legend.key.height = unit(0.25, "cm"),
legend.title = element_blank())
# Calculate the overall mean sales
overall_mean <- mean(for_weeks_data$Average_Sales, na.rm = TRUE)
# Plot with updated x-axis and mean line
ggplot(for_weeks_data, aes(x = Week, y = Average_Sales, color = type, group = 1)) +
geom_line(size = 1) +  # Line plot with color based on type
geom_point(size = 2) +  # Points for clarity
geom_hline(yintercept = overall_mean, color = "red", linetype = "dashed", size = 0.7) +  # Horizontal mean line
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +  # Format x-axis as weeks grouped by month
scale_y_continuous(breaks = seq(0, max(for_weeks_data$Average_Sales, na.rm = TRUE), by = 500)) +
scale_color_manual(values = c("Historical Data" = "blue", "Forecasted Data" = "green")) +  # Custom colors
labs(title = "Weekly Average Sales",
x = "Week",
y = "Average Sales") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.width = unit(1, "cm"),
legend.key.height = unit(0.25, "cm"),
legend.title = element_blank()  # Remove legend title
)
for_weeks_data = for_weeks_data[for_weeks_data$Week > "2014-12-29"]
for_weeks_data = for_weeks_data[as.Date(for_weeks_data$Week) > as.Date("2014-12-29"), ]
# Calculate the overall mean sales
overall_mean <- mean(for_weeks_data$Average_Sales, na.rm = TRUE)
# Plot with updated x-axis and mean line
ggplot(for_weeks_data, aes(x = Week, y = Average_Sales, color = type, group = 1)) +
geom_line(size = 1) +  # Line plot with color based on type
geom_point(size = 2) +  # Points for clarity
geom_hline(yintercept = overall_mean, color = "red", linetype = "dashed", size = 0.7) +  # Horizontal mean line
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +  # Format x-axis as weeks grouped by month
scale_y_continuous(breaks = seq(0, max(for_weeks_data$Average_Sales, na.rm = TRUE), by = 500)) +
scale_color_manual(values = c("Historical Data" = "blue", "Forecasted Data" = "green")) +  # Custom colors
labs(title = "Weekly Average Sales",
x = "Week",
y = "Average Sales") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.width = unit(1, "cm"),
legend.key.height = unit(0.25, "cm"),
legend.title = element_blank()  # Remove legend title
)
for_weeks_data = for_weeks_data[as.Date(for_weeks_data$Week) > as.Date("2014-12-29"), ]
# Calculate the overall mean sales
overall_mean <- mean(for_weeks_data$Average_Sales, na.rm = TRUE)
# Plot with updated x-axis and mean line
ggplot(for_weeks_data, aes(x = Week, y = Average_Sales, color = type, group = 1)) +
geom_line(size = 1) +  # Line plot with color based on type
geom_point(size = 2) +  # Points for clarity
geom_hline(yintercept = overall_mean, color = "red", linetype = "dashed", size = 0.7) +  # Horizontal mean line
scale_x_date(date_labels = "%b %Y", date_breaks = "1 week") +  # Format x-axis as weeks grouped by month
scale_y_continuous(breaks = seq(0, max(for_weeks_data$Average_Sales, na.rm = TRUE), by = 500)) +
scale_color_manual(values = c("Historical Data" = "blue", "Forecasted Data" = "green")) +  # Custom colors
labs(title = "Weekly Average Sales",
x = "Week",
y = "Average Sales") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),  # Rotate x-axis labels
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.width = unit(1, "cm"),
legend.key.height = unit(0.25, "cm"),
legend.title = element_blank()  # Remove legend title
)
for_weeks_data = for_weeks_data[as.Date(for_weeks_data$Week) > as.Date("2014-12-29"), ]
# Calculate the overall mean sales
overall_mean <- mean(for_weeks_data$Average_Sales, na.rm = TRUE)
# Plot with updated x-axis and mean line
ggplot(for_weeks_data, aes(x = Week, y = Average_Sales, color = type, group = 1)) +
geom_line(size = 1) +  # Line plot with color based on type
geom_point(size = 2) +  # Points for clarity
geom_hline(yintercept = overall_mean, color = "red", linetype = "dashed", size = 0.7) +  # Horizontal mean line
scale_x_date(date_labels = "%b %Y", date_breaks = "2 weeks") +  # Format x-axis as weeks grouped by month
scale_y_continuous(breaks = seq(0, max(for_weeks_data$Average_Sales, na.rm = TRUE), by = 500)) +
scale_color_manual(values = c("Historical Data" = "blue", "Forecasted Data" = "green")) +  # Custom colors
labs(title = "Weekly Average Sales",
x = "Week",
y = "Average Sales") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),  # Rotate x-axis labels
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.width = unit(1, "cm"),
legend.key.height = unit(0.25, "cm"),
legend.title = element_blank()  # Remove legend title
)
# Calculate the overall mean sales
overall_mean = mean(for_month_data$Average_Sales, na.rm = TRUE)
# Plot with updated x-axis and mean line
ggplot(for_month_data, aes(x = Month, y = Average_Sales, color = type, group = 1)) +
geom_line(size = 1) +  # Line plot with color based on type
geom_point(size = 2) +  # Points for clarity
geom_hline(yintercept = overall_mean, color = "red", linetype = "dashed", size = 0.7) +  # Horizontal mean line
scale_x_date(date_labels = "%b %Y", date_breaks = "2 months") +  # Format x-axis as months
scale_y_continuous(breaks = seq(0, max(for_month_data$Average_Sales), by = 500)) +
scale_color_manual(values = c("Historical Data" = "blue", "Forecasted Data" = "green")) +  # Custom colors
labs(title = " ",
x = " ",
y = " ") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
legend.title = element_blank()) + # Remove legend title
theme(
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.width = unit(1, "cm"),
legend.key.height = unit(0.25, "cm"),
legend.title = element_blank())
ggsave("month-forecast.png")
for_weeks_data = for_weeks_data[as.Date(for_weeks_data$Week) > as.Date("2014-12-29"), ]
# Calculate the overall mean sales
overall_mean <- mean(for_weeks_data$Average_Sales, na.rm = TRUE)
# Plot with updated x-axis and mean line
ggplot(for_weeks_data, aes(x = Week, y = Average_Sales, color = type, group = 1)) +
geom_line(size = 1) +  # Line plot with color based on type
geom_point(size = 2) +  # Points for clarity
geom_hline(yintercept = overall_mean, color = "red", linetype = "dashed", size = 0.7) +  # Horizontal mean line
scale_x_date(date_labels = "%b %Y", date_breaks = "2 weeks") +  # Format x-axis as weeks grouped by month
scale_y_continuous(breaks = seq(0, max(for_weeks_data$Average_Sales, na.rm = TRUE), by = 500)) +
scale_color_manual(values = c("Historical Data" = "blue", "Forecasted Data" = "green")) +  # Custom colors
labs(title = "Weekly Average Sales",
x = "Week",
y = "Average Sales") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),  # Rotate x-axis labels
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.width = unit(1, "cm"),
legend.key.height = unit(0.25, "cm"),
legend.title = element_blank()  # Remove legend title
)
ggsave("week-forecast.png")
for_weeks_data = for_weeks_data[as.Date(for_weeks_data$Week) > as.Date("2014-12-29"), ]
# Calculate the overall mean sales
overall_mean <- mean(for_weeks_data$Average_Sales, na.rm = TRUE)
# Plot with updated x-axis and mean line
ggplot(for_weeks_data, aes(x = Week, y = Average_Sales, color = type, group = 1)) +
geom_line(size = 1) +  # Line plot with color based on type
geom_point(size = 2) +  # Points for clarity
geom_hline(yintercept = overall_mean, color = "red", linetype = "dashed", size = 0.7) +  # Horizontal mean line
scale_x_date(date_labels = "%b %Y", date_breaks = "2 weeks") +  # Format x-axis as weeks grouped by month
scale_y_continuous(breaks = seq(0, max(for_weeks_data$Average_Sales, na.rm = TRUE), by = 500)) +
scale_color_manual(values = c("Historical Data" = "blue", "Forecasted Data" = "green")) +  # Custom colors
labs(title = " ",
x = " ",
y = " ") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),  # Rotate x-axis labels
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.width = unit(1, "cm"),
legend.key.height = unit(0.25, "cm"),
legend.title = element_blank()  # Remove legend title
)
ggsave("week-forecast.png")
for_weeks_data = for_weeks_data[as.Date(for_weeks_data$Week) > as.Date("2014-12-29"), ]
# Calculate the overall mean sales
overall_mean <- mean(for_weeks_data$Average_Sales, na.rm = TRUE)
# Plot with updated x-axis and mean line
ggplot(for_weeks_data, aes(x = Week, y = Average_Sales, color = type, group = 1)) +
geom_line(size = 1) +  # Line plot with color based on type
geom_point(size = 2) +  # Points for clarity
geom_hline(yintercept = overall_mean, color = "red", linetype = "dashed", size = 0.7) +  # Horizontal mean line
scale_x_date(date_labels = "%b %Y", date_breaks = "2 weeks") +  # Format x-axis as weeks grouped by month
scale_y_continuous(breaks = seq(0, max(for_weeks_data$Average_Sales, na.rm = TRUE), by = 500)) +
scale_color_manual(values = c("Historical Data" = "blue", "Forecasted Data" = "green")) +  # Custom colors
labs(title = " ",
x = " ",
y = " ") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.width = unit(1, "cm"),
legend.key.height = unit(0.25, "cm"),
legend.title = element_blank()  # Remove legend title
)
ggsave("week-forecast.png")
