# Weeks for forecasted data:
weekly_sales_f = forecasted %>%
mutate(Week = as.Date(cut(Date, breaks = "week"))) %>%  # Group dates by week
group_by(Week) %>%
summarise(Average_Sales = mean(Sales, na.rm = TRUE))  # Calculate average sales
weekly_sales_f$Average_Sales = round(weekly_sales_f$Average_Sales, 0)  # Round average sales
weekly_sales_f$type = "Forecasted Data"
for_month_data = rbind(monthly_sales, monthly_sales_f)
for_weeks_data = rbind(weekly_sales, weekly_sales_f)
for_weeks_data = for_weeks_data[-c(136),]
for_week_mean = mean(for_weeks_data$Average_Sales)
ggplot(for_weeks_data, aes(x = Week, y = Average_Sales, fill = type)) +
geom_col(alpha = 0.8) +
geom_text(aes(label = round(Average_Sales, 0)),
vjust = -0.5, size = 3) +
geom_hline(yintercept = for_week_mean, color = "red", linetype = "dashed", size = 0.7) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate labels for better readability
week_mean <- mean(weekly_sales_f$Average_Sales)
ggplot(weekly_sales_f, aes(x = Week, y = Average_Sales)) +
geom_col(alpha = 0.8) +
geom_text(aes(label = round(Average_Sales, 0)),
vjust = -0.5, size = 3) +
geom_hline(yintercept = week_mean, color = "red", linetype = "dashed", size = 0.7) +
scale_x_date(date_breaks = "1 week") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate labels for better readability
week_mean <- mean(weekly_sales_f$Average_Sales)
ggplot(weekly_sales_f, aes(x = Week, y = Average_Sales)) +
geom_col(alpha = 0.8) +
geom_text(aes(label = round(Average_Sales, 0)),
vjust = -0.5, size = 3) +
geom_hline(yintercept = week_mean, color = "red", linetype = "dashed", size = 0.7) +
scale_x_date(date_breaks = "1 week") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = " ",
x = " ",
y = " ") +
theme_minimal() readability
week_mean <- mean(weekly_sales_f$Average_Sales)
ggplot(weekly_sales_f, aes(x = Week, y = Average_Sales)) +
geom_col(alpha = 0.8) +
geom_text(aes(label = round(Average_Sales, 0)),
vjust = -0.5, size = 3) +
geom_hline(yintercept = week_mean, color = "red", linetype = "dashed", size = 0.7) +
scale_x_date(date_breaks = "1 week") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = " ",
x = " ",
y = " ") +
theme_minimal()
week_mean <- mean(weekly_sales_f$Average_Sales)
ggplot(weekly_sales_f, aes(x = Week, y = Average_Sales)) +
geom_col(alpha = 0.8) +
geom_text(aes(label = round(Average_Sales, 0)),
vjust = -0.5, size = 3) +
geom_hline(yintercept = week_mean, color = "red", linetype = "dashed", size = 0.7) +
scale_x_date(date_breaks = "1 week") +
theme(axis.text.x = element_text(angle = 70, hjust = 1)) +
labs(title = " ",
x = " ",
y = " ") +
theme_minimal()
week_mean <- mean(weekly_sales_f$Average_Sales)
ggplot(weekly_sales_f, aes(x = Week, y = Average_Sales)) +
geom_col(alpha = 0.8) +
geom_text(aes(label = round(Average_Sales, 0)),
vjust = -0.5, size = 3) +
geom_hline(yintercept = week_mean, color = "red", linetype = "dashed", size = 0.7) +
scale_x_date(date_breaks = "1 week") +
labs(title = " ",
x = " ",
y = " ") +
theme_minimal()
week_mean <- mean(weekly_sales_f$Average_Sales)
ggplot(weekly_sales_f, aes(x = Week, y = Average_Sales)) +
geom_col(alpha = 0.8) +
geom_text(aes(label = round(Average_Sales, 0)),
vjust = -0.5, size = 3) +
geom_hline(yintercept = week_mean, color = "red", linetype = "dashed", size = 0.7) +
scale_x_date(date_breaks = "1 week") +
labs(title = " ",
x = " ",
y = " ") +
theme_minimal()
week_mean <- mean(weekly_sales_f$Average_Sales)
ggplot(weekly_sales_f, aes(x = Week, y = Average_Sales)) +
geom_col(alpha = 0.8) +
geom_text(aes(label = round(Average_Sales, 0)),
vjust = -0.5, size = 3) +
geom_hline(yintercept = week_mean, color = "red", linetype = "dashed", size = 0.7) +
scale_x_date(date_breaks = "1 week") +
labs(title = " ",
x = " ",
y = " ") +
theme_minimal()
ggsave("week-forecast2.png")
167+108+36+129+267+82+35+65+43+75+153+123+149+63+49+161
1705-62
##### DATA71011 Understanding Data and their Environment
##### Coursework Project
##### MSc Data Science 2024/25
##### Data preprocessing
# -----------------------------------------Libraries------------------------------------
# --------------------------------------------------------------------------------------
library(rio)
library(dplyr)
library(stringr)
library(lubridate)
library(mice)
library(ggplot2)
# -----------------------------------------Import data----------------------------------
# --------------------------------------------------------------------------------------
stores = import("/Users/alexander/Documents/MSc Data Science/Understanding Data and their Environment/Assignment 2/store.csv")
trainData = import("/Users/alexander/Documents/MSc Data Science/Understanding Data and their Environment/Assignment 2/train.csv")
testData = import("/Users/alexander/Documents/MSc Data Science/Understanding Data and their Environment/Assignment 2/test.csv")
# ---------------------------------------Irregularities-----------------------------------------
# ----------------------------------------------------------------------------------------------
#### PromoInterval
stores = stores %>% # White spaces in PromoInterval that are not recognized as NAs.
mutate(across(everything(), ~ ifelse(str_trim(.) == "", NA, .)))
sum(is.na(stores$PromoInterval)) # 544 missing values
#### New vector to calculate the length of time of nearest competitor existence
reference_date = as.Date("2015-07-31") # Set reference date (last day of collected information)
stores$CompetitionOpenDate = as.Date(paste(stores$CompetitionOpenSinceYear,
stores$CompetitionOpenSinceMonth, "1", sep = "-"))
stores$DiffTimeMonths = interval(stores$CompetitionOpenDate,
reference_date) %/% months(1) # Calculate diff-time:
#### New vector to calculate the length of promo existence
stores$PromoDate = as.Date(paste(stores$Promo2SinceYear, stores$Promo2SinceWeek,
1, sep = "-"), format = "%Y-%U-%u")
stores$DiffPromoTimeMonths = interval(stores$PromoDate, reference_date) %/% months(1)
# ------------------------------Missing data and imputation-----------------------------------
# --------------------------------------------------------------------------------------------
sum(is.na(stores$CompetitionDistance)) # 3 -> Hot Deck imputation
sum(is.na(stores$DiffTimeMonths)) # 354 -> Multiple Imputation
sum(is.na(stores$DiffPromoTimeMonths)) # 544 -> Replace with Zero (no promotion)
#### CompetitionDistance: Hot Deck imputation
stores = stores %>%
group_by(StoreType, Assortment) %>%
mutate(
CompetitionDistance = ifelse(
is.na(CompetitionDistance),
median(CompetitionDistance, na.rm = TRUE),  # Replace with group median due to outliers
CompetitionDistance
)
)
#### DiffPromoTimeMonths: Replace with zero (no promotions)
stores$DiffPromoTimeMonths[is.na(stores$DiffPromoTimeMonths)] = 0
sum(is.na(stores$DiffPromoTimeMonths))
#### DiffTimeMonths: Multiple Imputation with MICE
predictors = stores[, c("DiffTimeMonths", "StoreType", "Assortment",
"CompetitionDistance", "Promo2")] # Select relevant predictors
# Dummy variables
predictors$StoreType = as.factor(predictors$StoreType)
predictors$Assortment = as.factor(predictors$Assortment)
store_type_dummies = model.matrix(~ StoreType - 1, data = predictors)[, -1]
assortment_dummies = model.matrix(~ Assortment - 1, data = predictors)[, -1]
predictorsDummies = cbind(predictors, store_type_dummies, assortment_dummies)
predictorsDummies = predictorsDummies[-c(2,3)]
# Perform multiple imputation:
imputed_data = mice(predictorsDummies, m = 10, maxit = 50, method = "pmm", seed = 123)
complete_data = complete(imputed_data)
# Back to dataset:
imputed_diff_time_months = complete_data$DiffTimeMonths
stores$DiffTimeMonths[is.na(stores$DiffTimeMonths)] = imputed_diff_time_months[is.na(stores$DiffTimeMonths)]
# Checks:
densityplot(imputed_data)
xyplot(imputed_data, DiffTimeMonths ~ Promo2 + StoreTypeb
+ StoreTypec + StoreTyped + Assortmentb + Assortmentc, pch=18,cex=1)
xyplot(imputed_data, DiffTimeMonths ~ CompetitionDistance, pch=18,cex=1)
# ---------------------------------Data integration---------------------------------
# ----------------------------------------------------------------------------------
#### Check if we have unique stores in stores.csv
length(unique(stores$Store)) == nrow(stores) #TRUE
# Data unification
data = merge(trainData, stores, by = "Store", all = TRUE)
print(dim(data))
# Only necessary variables:
data = data[,c(1:12,15,19:22)]
# Assigning format:
data$Date = as.Date(data$Date, format = "%d/%m/%Y") # Date for forecasting
data = data %>%
mutate(StateHoliday = case_when(
StateHoliday == "0" ~ 1L,
StateHoliday == "a" ~ 2L,
StateHoliday == "b" ~ 3L,
StateHoliday == "c" ~ 4L,
TRUE ~ NA_integer_  # To handle unexpected values
))
data = data %>%
mutate(StoreType = case_when(
StoreType == "a" ~ 1L,
StoreType == "b" ~ 2L,
StoreType == "c" ~ 3L,
StoreType == "d" ~ 4L,
TRUE ~ NA_integer_  # To handle unexpected values
))
data = data %>%
mutate(Assortment = case_when(
Assortment == "a" ~ 1L,
Assortment == "b" ~ 2L,
Assortment == "c" ~ 3L,
TRUE ~ NA_integer_  # To handle unexpected values
))
### Drop irrelevant features for forecasting:
data = data[,-c(14,16)]
data$Set = "Training"
# -------------------------------Test Set Preparation-------------------------------
# ----------------------------------------------------------------------------------
# + DayOfWeek
# + Promo
# + StateHoliday
# + SchoolHoliday
# + StoreType
# + Assortment
# + CompetitionDistance
# + Promo2
# + DiffTimeMonths
# + DiffPromoTimeMonths
compFeatures = stores[,c("Store","StoreType","Assortment","CompetitionDistance","Promo2",
"DiffTimeMonths","DiffPromoTimeMonths")]
testData = merge(testData, compFeatures, by = "Store", all.x = T)
# Assigning format:
testData$Date = as.Date(testData$Date, format = "%d/%m/%Y") # Date for forecasting
testData = testData %>%
mutate(StateHoliday = case_when(
StateHoliday == "0" ~ 1L,
StateHoliday == "a" ~ 2L,
StateHoliday == "b" ~ 3L,
StateHoliday == "c" ~ 4L,
TRUE ~ NA_integer_  # To handle unexpected values
))
testData = testData %>%
mutate(StoreType = case_when(
StoreType == "a" ~ 1L,
StoreType == "b" ~ 2L,
StoreType == "c" ~ 3L,
StoreType == "d" ~ 4L,
TRUE ~ NA_integer_  # To handle unexpected values
))
testData = testData %>%
mutate(Assortment = case_when(
Assortment == "a" ~ 1L,
Assortment == "b" ~ 2L,
Assortment == "c" ~ 3L,
TRUE ~ NA_integer_  # To handle unexpected values
))
testData$Set = "Testing"
finalDATA = rbind(data, testData)
# ----------------------------------------END---------------------------------------
# ----------------------------------------------------------------------------------
summary(trainData)
library(rio)
library(ggplot2)
library(dplyr)
library(tidyr)
library(forcats)
library(hexbin)
library(ggrepel)
data = import("/Users/alexander/Documents/MSc Data Science/Understanding Data and their Environment/Assignment 2/final-data/final-trainData.csv")
forecasted = import("/Users/alexander/Documents/MSc Data Science/Understanding Data and their Environment/Assignment 2/final-data/outputFINALudate.csv")
open = data[data$Open == 1,] # Only working with data for open stores
stats = open %>%
summarize(
mean_sales = mean(Sales, na.rm = TRUE),
sd_sales = sd(Sales, na.rm = TRUE),
p25 = quantile(Sales, 0.25, na.rm = TRUE),
p50 = quantile(Sales, 0.50, na.rm = TRUE),
p75 = quantile(Sales, 0.75, na.rm = TRUE)
)
# Create density plot
ggplot(open, aes(x = Sales)) +
geom_density(fill = "lightblue", alpha = 0.6) +  # Density plot
geom_vline(aes(xintercept = stats$mean_sales), color = "red",
linetype = "dashed", size = .5) +  # Mean
annotate("text", x = 30000, y = 0.00012,
label = paste0("Mean: ", round(stats$mean_sales, 0),
"\nSD: ", round(stats$sd_sales, 0),
"\nP25: ", round(stats$p25,0),
"\nP50: ", round(stats$p50,0),
"\nP75: ", round(stats$p75,0)), size = 3) +
labs(x = " ",
y = " ") +
theme_minimal()
ggsave("distribution.png")
monthly_sales = open %>%
mutate(Month = as.Date(cut(Date, breaks = "month"))) %>%  # Group dates by month
group_by(Month) %>%
summarise(Average_Sales = mean(Sales, na.rm = TRUE))  # Calculate average sales
monthly_sales$Average_Sales = round(monthly_sales$Average_Sales,0)
# Calculate the overall mean sales
overall_mean = mean(monthly_sales$Average_Sales, na.rm = TRUE)
# Plot with updated x-axis and mean line
ggplot(monthly_sales, aes(x = Month, y = Average_Sales)) +
geom_line(color = "blue", size = 1) +  # Line plot
geom_point(color = "darkred", size = 2) +  # Points for clarity
geom_hline(yintercept = overall_mean, color = "red", linetype = "dashed", size = 0.7) +  # Horizontal mean line
scale_x_date(date_labels = "%b %Y", date_breaks = "2 months") +  # Format x-axis as months
scale_y_continuous(breaks = seq(0, max(monthly_sales$Average_Sales), by = 500)) +
labs(title = " ",
x = " ",
y = " ") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
ggsave("trends_month.png")
open$Promo = factor(open$Promo, levels = c(0:1), labels = c("No","Yes"))
open = open %>%
mutate(across(c(StoreType, DayOfWeek, Assortment, Promo), as.character))
data_long = open %>%
pivot_longer(
cols = c(StoreType, DayOfWeek, Assortment, Promo),
names_to = "Category",
values_to = "Group"
)
# Summarise mean sales for each group within each category
summary_data = data_long %>%
group_by(Category, Group) %>%
summarise(Mean_Sales = mean(Sales, na.rm = TRUE), .groups = "drop")
summary_data = summary_data %>%
mutate(Group = fct_reorder(Group, Mean_Sales, .desc = TRUE))
# Plot mean sales for each group within each category
ggplot(summary_data, aes(x = Group, y = Mean_Sales, fill = Group)) +
geom_col(alpha = 0.8) +
geom_text(aes(label = round(Mean_Sales, 0)),
vjust = -0.5, size = 3) +  # Add mean values on top
facet_wrap(~ Category, scales = "free_x") +  # Separate graphs by Category
scale_y_continuous(breaks = seq(0, max(monthly_sales$Average_Sales), by = 1000))+
labs(title = " ",
x = "",
y = "") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust =.5),  # Rotate x-axis labels
legend.position = "none")  # Remove legend since groups are clear
ggsave("trends_groups.png")
open$SchoolHoliday = factor(open$SchoolHoliday, levels = c(0:1), labels = c("No","Yes"))
open = open %>%
mutate(across(c(StateHoliday, SchoolHoliday), as.character))
data_long = open %>%
pivot_longer(
cols = c(StateHoliday, SchoolHoliday),
names_to = "Category",
values_to = "Group"
)
# Summarise mean sales for each group within each category
summary_data = data_long %>%
group_by(Category, Group) %>%
summarise(Mean_Sales = mean(Sales, na.rm = TRUE), .groups = "drop")
summary_data = summary_data %>%
mutate(Group = fct_reorder(Group, Mean_Sales, .desc = TRUE))
# Plot mean sales for each group within each category
ggplot(summary_data, aes(x = Group, y = Mean_Sales, fill = Group)) +
geom_col(alpha = 0.8) +
geom_text(aes(label = round(Mean_Sales, 0)),
vjust = -0.5, size = 3) +  # Add mean values on top
facet_wrap(~ Category, scales = "free_x") +  # Separate graphs by Category
scale_y_continuous(breaks = seq(0, max(monthly_sales$Average_Sales), by = 1000))+
labs(title = " ",
x = "",
y = "") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust =.5),  # Rotate x-axis labels
legend.position = "none")  # Remove legend since groups are clear
ggsave("holiday_groups.png")
promo = open[open$Promo2 == 1,]
ggplot(open, aes(x = DiffPromoTimeMonths, y = Sales)) +
geom_hex(bins = 100) +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
geom_smooth(method = "gam", formula = y ~ s(x), color = "red", size = .5) +
labs(title = " ",
x = "Time Participating in a Promotion",
y = "Sales",
fill = "Count") +
theme_minimal() +
theme(
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.width = unit(2, "cm"),
legend.key.height = unit(0.25, "cm"),
legend.title = element_blank(),  # Remove legend title
# Adjust axis title and text size
axis.title = element_text(size = 10),
axis.text = element_text(size = 8)
)
# For all features:
tmodel = c("OLS","Ridge","Lasso", "MLP")
rmspe = c(0.2795, 0.2797, 0.2795, 0.2159)
r2 = c(0.7681, 0.7681, 0.7681, 0.8430)
AF = as.data.frame(cbind(tmodel,rmspe, r2))
AF$nfeatures = "All Features"
tmodel = c("OLS","Ridge","Lasso","MLP")
rmspe = c(0.2795, 0.2795, 0.2795, 0.2221)
r2 = c(0.7684, 0.7683, 0.7684, 0.8374)
SF = as.data.frame(cbind(tmodel,rmspe, r2))
SF$nfeatures = "Selected Features"
mlModels = rbind(AF,SF)
mlModels$rmspe = as.numeric(as.character(mlModels$rmspe))
mlModels$r2 = as.numeric(as.character(mlModels$r2))
# Create the RMSPE plot
rmspe_plot = ggplot(mlModels, aes(x = tmodel, y = rmspe, group = nfeatures, color = nfeatures)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
geom_text_repel(aes(label = round(rmspe, 4)), size = 6, show.legend = FALSE) +  # Use ggrepel for labels
labs(title = " ", x = " ", y = "RMSPE") +
theme_minimal() +
theme(
legend.position = "bottom",
legend.title = element_blank(),
axis.title = element_text(size = 10),
axis.text = element_text(size = 8)
)
# Save the plot
ggsave("rmspe.png")
# Create the R² plot
r2_plot = ggplot(mlModels, aes(x = tmodel, y = r2, group = nfeatures, color = nfeatures)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
geom_text_repel(aes(label = round(r2, 4)), size = 6, show.legend = FALSE) +
labs(title = " ", x = " ", y = "R²") +
theme_minimal() +
theme(
legend.position = "bottom",
legend.title = element_blank(),
axis.title = element_text(size = 10),
axis.text = element_text(size = 8))
ggsave("r2.png")
View(forecasted)
# Months:
monthly_sales_f = forecasted %>%
mutate(Month = as.Date(cut(Date, breaks = "month"))) %>%  # Group dates by month
group_by(Month) %>%
summarise(Average_Sales = mean(Sales, na.rm = TRUE))  # Calculate average sales
monthly_sales_f$Average_Sales = round(monthly_sales_f$Average_Sales,0)
monthly_sales$type = "Historical Data"
monthly_sales_f$type = "Forecasted Data"
View(monthly_sales)
View(monthly_sales_f)
# Weeks:
weekly_sales = open %>%
mutate(Week = as.Date(cut(Date, breaks = "week"))) %>%  # Group dates by week
group_by(Week) %>%
summarise(Average_Sales = mean(Sales, na.rm = TRUE))  # Calculate average sales
weekly_sales$Average_Sales = round(weekly_sales$Average_Sales, 0)  # Round average sales
weekly_sales$type = "Historical Data"
# Weeks for forecasted data:
weekly_sales_f = forecasted %>%
mutate(Week = as.Date(cut(Date, breaks = "week"))) %>%  # Group dates by week
group_by(Week) %>%
summarise(Average_Sales = mean(Sales, na.rm = TRUE))  # Calculate average sales
weekly_sales_f$Average_Sales = round(weekly_sales_f$Average_Sales, 0)  # Round average sales
weekly_sales_f$type = "Forecasted Data"
for_month_data = rbind(monthly_sales, monthly_sales_f)
for_weeks_data = rbind(weekly_sales, weekly_sales_f)
# Calculate the overall mean sales
overall_mean = mean(for_month_data$Average_Sales, na.rm = TRUE)
# Plot with updated x-axis and mean line
ggplot(for_month_data, aes(x = Month, y = Average_Sales, color = type, group = 1)) +
geom_line(size = 1) +  # Line plot with color based on type
geom_point(size = 2) +  # Points for clarity
geom_hline(yintercept = overall_mean, color = "red", linetype = "dashed", size = 0.7) +  # Horizontal mean line
scale_x_date(date_labels = "%b %Y", date_breaks = "2 months") +  # Format x-axis as months
scale_y_continuous(breaks = seq(0, max(for_month_data$Average_Sales), by = 500)) +
scale_color_manual(values = c("Historical Data" = "blue", "Forecasted Data" = "green")) +  # Custom colors
labs(title = " ",
x = " ",
y = " ") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
legend.title = element_blank()) + # Remove legend title
theme(
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.width = unit(1, "cm"),
legend.key.height = unit(0.25, "cm"),
legend.title = element_blank())
ggsave("month-forecast.png")
for_weeks_data = for_weeks_data[as.Date(for_weeks_data$Week) > as.Date("2014-12-29"), ]
# Calculate the overall mean sales
overall_mean <- mean(for_weeks_data$Average_Sales, na.rm = TRUE)
# Plot with updated x-axis and mean line
ggplot(for_weeks_data, aes(x = Week, y = Average_Sales, color = type, group = 1)) +
geom_line(size = 1) +  # Line plot with color based on type
geom_point(size = 2) +  # Points for clarity
geom_hline(yintercept = overall_mean, color = "red", linetype = "dashed", size = 0.7) +  # Horizontal mean line
scale_x_date(date_labels = "%b %Y", date_breaks = "2 weeks") +  # Format x-axis as weeks grouped by month
scale_y_continuous(breaks = seq(0, max(for_weeks_data$Average_Sales, na.rm = TRUE), by = 500)) +
scale_color_manual(values = c("Historical Data" = "blue", "Forecasted Data" = "green")) +  # Custom colors
labs(title = " ",
x = " ",
y = " ") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.width = unit(1, "cm"),
legend.key.height = unit(0.25, "cm"),
legend.title = element_blank()  # Remove legend title
)
ggsave("week-forecast.png")
week_mean <- mean(weekly_sales_f$Average_Sales)
ggplot(weekly_sales_f, aes(x = Week, y = Average_Sales)) +
geom_col(alpha = 0.8) +
geom_text(aes(label = round(Average_Sales, 0)),
vjust = -0.5, size = 3) +
geom_hline(yintercept = week_mean, color = "red", linetype = "dashed", size = 0.7) +
scale_x_date(date_breaks = "1 week") +
labs(title = " ",
x = " ",
y = " ") +
theme_minimal()
ggsave("week-forecast2.png")
